---
- name: Ensure we have a disk for our vm
  register: disk
  google.cloud.gcp_compute_disk:
    name: "{{ disk_name }}"
    size_gb: "{{ disk_size }}"
    source_image: "{{ disk_image }}"
    zone: "{{ zone }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    state: "{{ state }}"

- name: Ensure we have a network
  register: network
  google.cloud.gcp_compute_network:
    name: "{{ network_name }}"
    auto_create_subnetworks: 'true'
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    state: "{{ state }}"

- name: Ensure the network variable is available to the gcp_open_firewall play
  ansible.builtin.set_stats:
    data:
      network_info: "{{ network }}"

- name: Ensure we have an address for our vm
  register: address
  google.cloud.gcp_compute_address:
    name: "{{ address_name }}"
    region: "{{ region }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    state: "{{ state }}"

- name: Ensure we have an instance
  google.cloud.gcp_compute_instance:
    name: "{{ server_name }}"
    machine_type: "{{ machine_type }}"
    disks:
    - auto_delete: 'true'
      boot: 'true'
      source: '{{ disk }}'
    - auto_delete: 'true'
      interface: NVME
      type: SCRATCH
      initialize_params:
        disk_type: local-ssd
    metadata:
      startup-script-url: gs:://graphite-playground/bootstrap.sh
      cost-center: "{{ cost_center }}"
    labels:
      environment: "{{ my_environment }}"
    network_interfaces:
    - network: "{{ network }}"
      access_configs:
      - name: External NAT
        nat_ip: "{{ address }}"
        type: "{{ network_type }}"
    zone: "{{ zone }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    state: "{{ state }}"

- name: print address
  debug:
    msg: "{{ address['name']}} -> {{ address['address'] }}"

- name: Get an AAP API Token and store it as new_token
  register: new_token
  ansible.builtin.uri:
    url: "https://{{ controller_url }}/api/v2/tokens/"
    method: POST
    user: "{{ controller_user }}"
    password: "{{ controller_passwd }}"
    validate_certs: no
    force_basic_auth: yes
    status_code: 201 
    return_content: yes

- name: "Update the {{ inventory_name }} with the {{ address['name']}} server address" 
  awx.awx.host:
    controller_host: "https://{{ controller_url }}"
    controller_username: "{{ controller_user }}"
    controller_oauthtoken: "{{ new_token.json.token }}"
    name: "{{ address['address'] }}"
    inventory: "{{ inventory_name }}"
    state: present
    enabled: true

- name: "Create a group for {{ address['name']}} servers"
  awx.awx.group:
    controller_host: "https://{{ controller_url }}"
    controller_username: "{{ controller_user }}"
    controller_oauthtoken: "{{ new_token.json.token }}"
    name: "{{ address['name'] }}"
    description: "{{ address['name'] }} Servers"
    inventory: "{{ inventory_name }}"
    hosts: "{{ address['address'] }}"
    preserve_existing_hosts: true
